{"version":3,"sources":["utils/firebase.ts","Components/Forum.tsx","Components/Login.tsx","App/AppReducer.ts","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","accountsCollection","collection","postsCollection","InputDiv","styled","div","PostDiv","TopicListDiv","AuthorDateDiv","TwoBlockDiv","CommentBlockDiv","TimeOptions","weekday","year","month","day","Forum","state","useContext","AppContext","useState","posts","setPosts","newTopic","setNewTopic","comment","setComment","getAllPosts","a","async","temp","get","then","snapshot","forEach","doc","data","docId","id","topic","topicAuthor","topicTime","comments","useEffect","TextField","label","onChange","e","target","value","Button","size","color","onClick","add","username","Date","now","Object","keys","map","key","i","obj","toLocaleDateString","undefined","multiline","rows","topicId","commentContent","defaultValue","variant","updatedPosts","commentAuthor","commentTime","update","submitComment","c","j","AppActionType","LoginDiv","FieldsDiv","ChildDiv","ReminderDiv","Login","dispatch","setUsername","password","setPassword","captcha","setCaptcha","fillInfoReminder","setFillInfoReminder","checkCaptcha","setCheckCaptcha","checkUserExistInDB","setCheckUserExistInDB","loginAgain","setLoginAgain","checkAccountExisting","existing","sitekey","val","handleReCaptchaChange","currentPage","type","SET_LOGIN","initialState","createContext","AppReducer","action","SET_CURRENT_PAGE","SET_USERNAME","PAGE_LOGIC","App","useReducer","Compo","Provider","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c089cfc.chunk.js","sourcesContent":["import * as firebase from 'firebase/firebase'\nimport 'firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDllzovC1YT7zlssPkY9ZqXiysgutS19I4',\n  authDomain: 'forum-app-12822.firebaseapp.com',\n  databaseURL: 'https://forum-app-12822.firebaseio.com',\n  projectId: 'forum-app-12822',\n  storageBucket: 'forum-app-12822.appspot.com',\n  messagingSenderId: '247227593406',\n  appId: '1:247227593406:web:daf730938741ea99ab24ef',\n  measurementId: 'G-8ZN98439B5'\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nconst db = firebase.firestore()\nexport const accountsCollection = db.collection('accounts')\nexport const postsCollection = db.collection('posts')\n","import Button from '@material-ui/core/Button'\nimport {\n  default as TextArea,\n  default as TextField\n} from '@material-ui/core/TextField'\nimport React, { useContext, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { AppContext } from '../App/AppReducer'\nimport { postsCollection } from '../utils/firebase'\n\nconst InputDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n`\nconst PostDiv = styled.div`\n  margin: 10px;\n  background: #d3d3d3;\n  padding: 5px;\n`\n\nconst TopicListDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 10px auto auto auto;\n  width: 90vw;\n`\n\nconst AuthorDateDiv = styled.div`\n  font-size: 10px;\n  color: grey;\n  text-align: right;\n`\n\nconst TwoBlockDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n  margin-bottom: 10px;\n`\nconst CommentBlockDiv = styled.div`\n  margin: 15px;\n  font-size: smaller;\n  padding: 5px;\n`\n\nconst TimeOptions = {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n}\n\nconst Forum = () => {\n  const { state } = useContext(AppContext)\n  const [posts, setPosts] = useState({} as any)\n  const [newTopic, setNewTopic] = useState('')\n  const [comment, setComment] = useState({} as any)\n  const defaultComment = ''\n\n  async function getAllPosts() {\n    const temp = {} as any\n    await postsCollection.get().then(async (snapshot: any) => {\n      await snapshot.forEach((doc: any) => {\n        const data = doc.data()\n        const docId = doc.id\n        temp[docId] = {\n          topic: data.topic,\n          topicAuthor: data.topicAuthor,\n          topicTime: data.topicTime,\n          comments: data.comments\n        }\n      })\n    })\n    setPosts(temp)\n  }\n\n  useEffect(() => {\n    getAllPosts()\n  }, [])\n\n  async function createNewTopic() {\n    if (newTopic !== '') {\n      postsCollection.add({\n        topic: newTopic,\n        topicAuthor: state.username,\n        topicTime: Date.now(),\n        comments: []\n      })\n      await getAllPosts()\n      setNewTopic('')\n    }\n  }\n\n  function submitComment(topicId: string) {\n    const commentContent = (comment as any)[topicId]\n    const updatedPosts = {\n      ...posts[topicId],\n      comments: [\n        ...(posts[topicId] as any).comments,\n        {\n          comment: commentContent,\n          commentAuthor: state.username,\n          commentTime: Date.now()\n        }\n      ]\n    }\n    setPosts({\n      ...posts,\n      [topicId]: updatedPosts\n    })\n    postsCollection.doc(topicId).update({\n      ...updatedPosts\n    })\n    setComment({\n      ...comment,\n      [topicId]: ''\n    })\n  }\n\n  function updateComment(topicId: string, commentContent: string) {\n    setComment({\n      ...comment,\n      [topicId]: commentContent\n    })\n  }\n\n  return (\n    <TopicListDiv>\n      <InputDiv>\n        <TextField\n          id='standard=basic'\n          label='New Topic'\n          onChange={(e: any) => setNewTopic(e.target.value)}\n          value={newTopic}\n        />\n\n        <Button size='small' color='primary' onClick={() => createNewTopic()}>\n          Create\n        </Button>\n      </InputDiv>\n\n      <div>\n        {Object.keys(posts).map((key: any, i: any) => {\n          const obj = posts[key]\n          return (\n            <PostDiv key={`post-${i}`}>\n              <TwoBlockDiv key={`post-topic-block-${key}`}>\n                <div>{obj.topic}</div>\n                <div>\n                  <AuthorDateDiv>{obj.topicAuthor}</AuthorDateDiv>\n                  <AuthorDateDiv>\n                    {new Date(obj.topicTime).toLocaleDateString(\n                      undefined,\n                      TimeOptions\n                    )}\n                  </AuthorDateDiv>\n                </div>\n              </TwoBlockDiv>\n\n              <TwoBlockDiv key={`post-comment-block-${key}`}>\n                <div key={`new-comment-${i}`}>\n                  <TextArea\n                    label='Your Comment'\n                    multiline\n                    rows='3'\n                    key={`new-comment-${key}`}\n                    onChange={(e: any) => updateComment(key, e.target.value)}\n                    defaultValue={defaultComment}\n                    value={comment[key]}\n                  />\n                </div>\n                <div>\n                  <Button\n                    variant='contained'\n                    size='small'\n                    onClick={() => submitComment(key)}\n                  >\n                    Comment\n                  </Button>\n                </div>\n              </TwoBlockDiv>\n\n              <CommentBlockDiv key={`obj-${key}-comment-block`}>\n                {obj.comments.map((c: any, j: any) => {\n                  return (\n                    <TwoBlockDiv key={`obj-${key}-comment-${j}`}>\n                      <div>{c.comment}</div>\n                      <div>\n                        <AuthorDateDiv>{c.commentAuthor}</AuthorDateDiv>\n                        <AuthorDateDiv>\n                          {new Date(c.commentTime).toLocaleDateString(\n                            undefined,\n                            TimeOptions\n                          )}\n                        </AuthorDateDiv>\n                      </div>\n                    </TwoBlockDiv>\n                  )\n                })}\n              </CommentBlockDiv>\n            </PostDiv>\n          )\n        })}\n      </div>\n    </TopicListDiv>\n  )\n}\n\nexport default Forum\n","import Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport React, { useContext, useState } from 'react'\nimport ReCaptcha from 'react-google-recaptcha'\nimport styled from 'styled-components'\nimport { AppActionType, AppContext } from '../App/AppReducer'\nimport { accountsCollection } from '../utils/firebase'\n\nconst sitekeyConst = '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI'\n\nconst LoginDiv = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: flex-end;\n  text-align: center;\n  margin: 5vh auto;\n  max-width: 95vw;\n`\n\nconst FieldsDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ChildDiv = styled.div`\n  margin: 5px;\n  text-align: center;\n  align-items: center;\n`\n\nconst ReminderDiv = styled.div`\n  text-align: center;\n  color: red;\n`\n\nconst Login = () => {\n  const { dispatch } = useContext(AppContext)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [captcha, setCaptcha] = useState(false)\n  const [fillInfoReminder, setFillInfoReminder] = useState(false)\n  const [checkCaptcha, setCheckCaptcha] = useState(false)\n  const [checkUserExistInDB, setCheckUserExistInDB] = useState(true)\n  const [loginAgain, setLoginAgain] = useState(false)\n\n  function handleReCaptchaChange(val: any) {\n    if (val !== null) {\n      setCaptcha(true)\n      setCheckCaptcha(false)\n    }\n  }\n\n  async function checkAccountExisting() {\n    let existing = false\n    await accountsCollection.get().then((snapshot: any) => {\n      snapshot.forEach((doc: any) => {\n        if (\n          username === doc.data().username &&\n          password === doc.data().password\n        ) {\n          existing = true\n        }\n      })\n    })\n    return existing\n  }\n\n  async function clickLogin() {\n    setLoginAgain(false)\n    if (username !== '' && password !== '') {\n      if (!captcha) {\n        setCheckCaptcha(true)\n      } else {\n        setCheckCaptcha(false)\n        const existing = await checkAccountExisting()\n        if (existing) {\n          dispatch({\n            username,\n            currentPage: 'Forum',\n            type: AppActionType.SET_LOGIN\n          })\n        } else {\n          setCheckUserExistInDB(false)\n        }\n      }\n    } else {\n      setFillInfoReminder(true)\n    }\n  }\n\n  async function clickRegister() {\n    if (username !== '' && password !== '') {\n      setFillInfoReminder(false)\n      if (!captcha) {\n        setCheckCaptcha(true)\n      } else {\n        const existing = await checkAccountExisting()\n        if (!existing && captcha) {\n          accountsCollection.add({\n            username,\n            password\n          })\n          setCheckUserExistInDB(true)\n          setLoginAgain(true)\n        }\n      }\n    } else {\n      setFillInfoReminder(true)\n    }\n  }\n\n  return (\n    <div>\n      <LoginDiv>\n        <FieldsDiv>\n          <ChildDiv>\n            <TextField\n              id='standard-basic'\n              label='Username'\n              onChange={(e: any) => setUsername(e.target.value)}\n            />\n          </ChildDiv>\n          <ChildDiv>\n            <TextField\n              id='standard-basic'\n              label='Password'\n              onChange={(e: any) => setPassword(e.target.value)}\n            />\n          </ChildDiv>\n        </FieldsDiv>\n\n        <ChildDiv>\n          <ReCaptcha\n            sitekey={sitekeyConst}\n            onChange={(val: any) => handleReCaptchaChange(val)}\n          />\n        </ChildDiv>\n      </LoginDiv>\n\n      <ChildDiv>\n        <Button variant='contained' onClick={() => clickLogin()}>\n          Login\n        </Button>\n      </ChildDiv>\n      <ChildDiv>\n        <Button variant='contained' onClick={() => clickRegister()}>\n          Register\n        </Button>\n      </ChildDiv>\n      <ReminderDiv>\n        <div>\n          {fillInfoReminder && <div>Please fill in all the fields.</div>}\n        </div>\n        <div>\n          {checkCaptcha && <div>Please let us know you are not a robot.</div>}\n        </div>\n        <div>\n          {!checkUserExistInDB && (\n            <div>\n              You might enter your username or password wrong, or do not have an\n              account with us. Please register.\n            </div>\n          )}\n        </div>\n        <div>{loginAgain && <div>You may login again now.</div>}</div>\n      </ReminderDiv>\n    </div>\n  )\n}\n\nexport default Login\n","import { createContext, Dispatch } from 'react'\nimport Forum from '../Components/Forum'\nimport Login from '../Components/Login'\n\nexport enum AppActionType {\n  SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\n  SET_USERNAME = 'SET_USERNAME',\n  SET_LOGIN = 'SET_LOGIN'\n}\n\nexport interface IAppAction {\n  currentPage?: string\n  username?: string\n  type: AppActionType\n}\n\nexport const initialState = {\n  currentPage: 'Login',\n  username: 'user3'\n}\n\ninterface IContextProps {\n  state: typeof initialState\n  dispatch: Dispatch<IAppAction>\n}\n\nexport const AppContext = createContext({} as IContextProps)\n\nexport function AppReducer(state: any, action: IAppAction) {\n  switch (action.type) {\n    case AppActionType.SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.currentPage\n      }\n    case AppActionType.SET_USERNAME:\n      return {\n        ...state,\n        username: action.username\n      }\n    case AppActionType.SET_LOGIN:\n      return {\n        ...state,\n        username: action.username,\n        currentPage: action.currentPage\n      }\n    default:\n      return state\n  }\n}\n\ninterface IPageLogic {\n  [pageName: string]: any\n}\n\nexport const PAGE_LOGIC: IPageLogic = {\n  Login,\n  Forum\n}\n","import React, { useReducer } from 'react'\nimport './App.css'\nimport { AppContext, AppReducer, initialState, PAGE_LOGIC } from './AppReducer'\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(AppReducer, initialState)\n  const Compo = PAGE_LOGIC[state.currentPage]\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      <div className='App'>\n        <Compo />\n      </div>\n    </AppContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App/App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}